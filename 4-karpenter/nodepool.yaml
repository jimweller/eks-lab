apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: workloads
spec:
  template:
    metadata:
      labels:
        role: workloads    
    spec:
      requirements:
        - key: "role"
          operator: In
          values: ["workloads"]
        - key: "kubernetes.io/arch"
          operator: In
          values: ["arm64"]
        - key: "kubernetes.io/os"
          operator: In
          values: ["linux"]
        - key: "karpenter.sh/capacity-type"
          operator: In
          values: ["spot"]
        - key: "node.kubernetes.io/instance-type"
          operator: In
          values:
            - "t4g.medium"
            - "t4g.large"
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: workloads-class
  limits:
    cpu: "24" # Optional: Maximum CPUs to provision
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: workloads-class
spec:
  amiFamily: AL2023 # Amazon Linux 2023
  role: "KarpenterInstanceProfile" # Replace with your actual Karpenter instance profile name
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "eks-cluster" # Replace with your cluster name
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "eks-cluster" # Replace with your cluster name
  amiSelectorTerms:
    - name: "amazon-eks-node-al2023-arm64-standard-1.31-*"

    
# ---
# apiVersion: karpenter.sh/v1
# kind: NodeClaim
# metadata:
#   name: workloads-nodeclaim
# spec:
#   nodeClassRef:
#     group: karpenter.k8s.aws
#     kind: EC2NodeClass
#     name: workloads-class # Reference your EC2NodeClass
#   requirements:
#     - key: "kubernetes.io/arch"
#       operator: In
#       values: ["arm64"]
#     - key: "kubernetes.io/os"
#       operator: In
#       values: ["linux"]
#     - key: "karpenter.sh/capacity-type"
#       operator: In
#       values: ["spot"]
#     - key: "node.kubernetes.io/instance-type"
#       operator: In
#       values:
#         - "t4g.medium"
#         - "t4g.large"
